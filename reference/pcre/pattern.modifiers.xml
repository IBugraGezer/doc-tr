<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a0ae28d3bc85f927c22649ebd9a590b921534b7d Maintainer: nilgun Status: ready -->
<!-- CREDITS: haluk -->
<article xml:id="reference.pcre.pattern.modifiers" xmlns="http://docbook.org/ns/docbook">
 <title>Düzenli ifadeler için kullanılabilecek değiştiriciler</title>
 <titleabbrev>Şablon Değiştiricileri</titleabbrev>
  <para>
   Mevcut olası PCRE değiştiricileri aşağıda listelenmiştir. Yaylı ayraçlar
   içinde belirtilen isimler bu değiştiricilerin dahili PCRE isimleridir.
   Değiştiricilerdeki boşluklar va satırsonu karakterleri yok sayılır, diğer
   karakterler ise hataya sebep olur.
  </para>
  <para>
   <blockquote>
    <variablelist>
     <varlistentry>
      <term><emphasis>i</emphasis> (<literal>PCRE_CASELESS</literal>)</term>
      <listitem>
       <simpara>
        Bu değiştirici etkin olursa şablondaki harfler hem küçük hem de büyük
        harflerle eşleşir.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>m</emphasis> (<literal>PCRE_MULTILINE</literal>)</term>
      <listitem>
       <simpara>
        PCRE öntanımlı olarak, eşleşmeye konu dizgeyi karakterlerden oluşan
        tek bir satır olarak ele alır (satırsonu karakter ile bitmese bile).
        "Satır başlangıcıyla eşleşme işleci" olan ^ karakteri dizgenin
        başlangıcıyla, "satır sonuyla eşleşme işleci" olan $ karakteri ise
        dizgenin sonu ile veya (<emphasis>D</emphasis> değiştiricisi
        belirtilmedikçe) satırı sonlandıran satırsonu karakterinin öncesiyle
        eşleşir. Bu. Perl'de de böyledir.
       </simpara>
       <simpara>
        Bu değiştiricinin etkin olduğu durumda, satır başı ve satır sonu ile
        eşleşme işleçleri, dizgenin başı ve sonu ile eşleşmenin yanında
        satırsonu karakterinin (sırasıyla) sonrası ve öncesiyle de eşleşir. Bu
        değiştirici Perl'in \m değiştiricisine eşdeğerdir. Eğer eşleşmeye konu
        dizge "satırsonu karakteri "\n" içermiyorsa veya şablonda ^ veya $
        işleçleri kullanılmamışsa bu değiştiricinin bir etkisi olmayacaktır.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>s</emphasis> (<literal>PCRE_DOTALL</literal>)</term>
      <listitem>
       <simpara>
        Bu değiştirici etkin olduğunda şablondaki nokta işleci, satırsonu
        karakteri dahil tüm karakterlerle eşleşir. Etkin olmadığı takdirde
        satırsonu karakterleri dışlanır. Bu değiştirici Perl'ün \s
        değiştiricisine eşdeğerdir. [^a] gibi olumsuz bir sınıf, bu
        değiştiriciden bağımsız olarak daima satırsonu karateriyle eşleşir.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>x</emphasis> (<literal>PCRE_EXTENDED</literal>)</term>
      <listitem>
       <simpara>
        Bu değiştirici etkin olduğunda şablondaki boşluk karakterleri,
        öncelenmedikçe veya bir karakter sınıfı içinde yer almadıkça tamamen
        yoksayıldıkları gibi, bir karakter sınıfının dışında öncelenMEmiş bir
        # ve sonraki satırsonu karakteri arasındaki karakterlerin tamamı ile
        satırsonu karakteri de yoksayılır. Bu değiştirici Perl'ün \x
        değiştiricisine eşdeğerdir ve karmaşık şablonların içine açıklamalar
        konmasını mümkün kılar. Ancak, bunun sadece veri karakterlerine
        uygulanmakta oluşuna dikkat ediniz. Boşluk karakterleri, bir şablonda
        özel karakter dizilimlerinin içinde bulunamazlar; örneğin, bir koşullu
        alt şablon başlatan (?( dizilimi içinde bulunamazlar.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="reference.pcre.pattern.modifiers.eval">
      <term><emphasis>e</emphasis> (<literal>PREG_REPLACE_EVAL</literal>)</term>
      <listitem>
       &warn.deprecated.feature-5-5-0.removed-7-0-0;
       <simpara>
        Kullanımı önerilmeyen bu değiştirici etkin olduğunda,
        <function>preg_replace</function>
        işlevi sonuç dizgesini PHP kodu olarak değerlendirerek normal geriye
        gönderim ikameleri yapar ve sonucu arama dizgesiyle değiştirmek için
        kullanır. İkameli geriye gönderimlerdeki tek ve çift tırnaklarla
        tersbölü ve NULL karakterleri tersbölülerle öncelenir.
       </simpara>
       <caution>
        <para>
         <function>addslashes</function> işlevi, ikame gerçekleşmeden önce
         eşleşen her gerigönderimde çalıştırılır. Bu nedenle gerigönderim,
         tırnaklı bir dize olarak kullanıldığında, önceleme karakterleri
         değişmezlere dönüştürülür. Ancak, normalde dönüştürülmeyen öncelenmiş
         karakterlerin bölü çizgileri korunur. Bu nedenle, bu değiştiricinin
         kullanımı çok karmaşık hale gelir.
        </para>
       </caution>
       <caution>
        <para>
         <parameter>yenisi</parameter> değiştirgesinin geçerli bir PHP kod
         dizesi içerdiğinden emin olun, aksi takdirde PHP,
         <function>preg_replace</function> içeren her satırda bir ayrıştırma
         hatası oluşturur.
        </para>
       </caution>
       <caution>
        <para>
         Bu değiştiricinin kullanılması, kolayca uzaktan kod çalıştırma
         güvenlik açıklarına neden olabileceği için önerilmez. Bunları
         önlemek için bunun yerine <function>preg_replace_callback</function>
         işlevi kullanılmalıdır:
        </para>
        <informalexample>
         <programlisting role="php">
<![CDATA[
<?php
$html = $_POST['html'];

// Büyük harfli başlıklar
$html = preg_replace_callback(
    '(<h([1-6])>(.*?)</h\1>)',
    function ($m) {
        return "<h$m[1]>" . strtoupper($m[2]) . "</h$m[1]>";
    },
    $html
);
]]>
         </programlisting>
        </informalexample>
        <para>
         Yukarıdaki örnek <function>preg_replace</function> ve
         <literal>e</literal> değiştiricisi ile yazılsaydı,
         <literal>&lt;h1&gt;{${eval($_GET[php_code])}}&lt;/h1&gt;</literal>
         gibi bir dizge aktarılarak kod kolayca istismar edilebilirdi. Bu,
         saldırgana rastgele PHP kodunu çalıştırma ve böylece sunucuya
         neredeyse tam erişim sağlama imkanı verebilirdi.
        </para>
       </caution>
       <note>
        <para>
         Bu değiştiriciyi sadece <function>preg_replace</function> kullanır;
         diğer PCRE işlevleri bu değiştirciyi yoksayar.
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>A</emphasis> (<literal>PCRE_ANCHORED</literal>)</term>
      <listitem>
       <simpara>
        Bu değiştirici etkin olduğunda, şablon demirlemeye zolanır yani,
        şablon eşleşmeye konu dizgenin sadece başlangıcı ile eşleşmeye
        zorlanır. Bu etki, şablonun içindeki oluşumlarla da sağlanabilir ve
        Perl'de bunu yapmanın başka yolu yoktur.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>D</emphasis> (<literal>PCRE_DOLLAR_ENDONLY</literal>)</term>
      <listitem>
       <simpara>
        Bu değiştirici etkin olduğunda, şablondaki dolar işleci eşleşmeye konu
        dizgenin sadece sonu ile eşleşir. Bu değiştirici olmaksızın dolar
        işleci, satır sonlandıran karakter satırsonu karakteri olduğu takdirde
        sonuncu satır sonu karakterinin (daha öncekilerin değil) hemen öncesi
        ile eşleşir. <emphasis>m</emphasis> değiştiricisi etkin olduğunda bu
        değiştirici yok sayılır. Perl'de bu değiştiricinin eşdeğeri yoktur.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>S</emphasis></term>
      <listitem>
       <simpara>
        Bir şablon defalarca eşleştirilmeye çalışılıyorsa, eşleşme için
        harcanan zamanı kısaltmak için çözümlemeye harcanan zamanı arttırmak
        en iyi çözümdür. Bu değiştirici etkin olduğunda ek çözümlemeler
        yapılır. Halihazırda bu sadece, şablonu tek bir başlangıç karakteriyle
        eşleşmeye zorlayan demirli şablonlar hariçindeki şablonlar için
        yararlı olmaktadır.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>U</emphasis> (<literal>PCRE_UNGREEDY</literal>)</term>
      <listitem>
       <simpara>
        Bu değiştirici etkin olduğunda, niceleyicilerin açgözlülüğü tersine
        çevirir. Böylece, ardlarına bir "?" konmadıkça niceleyiciler öntanımlı
        olarak açgözlü olmaz. Bu değiştirici Perl ile uyumlu değildir.
        Ayrıca, <link linkend="regexp.reference.internal-options">değiştirici
        şablon içinde</link> de (?U ile) etkin kılılınabileceği gibi
        niceleyicinin ardına bir soru işareti konarak da
        (<literal>.*?</literal> gibi) bu sağlanabilir.
       </simpara>
       <note>
        <para>
         Normalde, isteksiz kipte <link
         linkend="ini.pcre.backtrack-limit">pcre.backtrack_limit</link>
         karakterden fazlasıyla eşleşme mümkün değildir.
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>X</emphasis> (<literal>PCRE_EXTRA</literal>)</term>
      <listitem>
       <simpara>
        Bu değiştirici PCRE'nin Perl ile uyumlu olmayan bir işlevselliğini açıp
        kapamakta kullanılır. Bir şablonda tersbölü ile öncelenmiş bir
        karakter özel bir anlama sahip değilse hataya sebep olur. Bu davranış,
        gelecekteki yorumlamalar için böyle tasarlanmıştır. Perl'de öntanımlı
        olarak, özel anlamı olmayan tersbölü ile öncelenmiş karakterler
        kendileri olarak ele alınırlar. Bu değiştiriciden etkilenen  bir
        değiştirici henüz yoktur.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>J</emphasis> (<literal>PCRE_INFO_JCHANGED</literal>)</term>
      <listitem>
       <simpara>
        (?J) dahili seçenek ayarı yerel <literal>PCRE_DUPNAMES</literal>
        seçeneğini değiştirerek isimlerin alt şablonlarda tekrarlanmasını
        mümkün kılar.
        PHP 7.2.0 ve sonrasında, <literal>J</literal> aynı zamanda değiştirici
        olarak da desteklenmekedir.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>u</emphasis> (<literal>PCRE_UTF8</literal>)</term>
      <listitem>
       <simpara>
        Bu değiştirici PCRE'nin Perl ile uyumlu olmayan bir işlevselliğini
        etkin kılarak şablon ve konu dizgelerinin karakter kodlamasının UTF-8
        olduğunun varsayılmasını sağlar.  Geçersiz bir konu, preg_*
        işlevlerinin hiçbir şeyle eşleşmemesine neden olur; geçersiz bir
        kalıp E_WARNING seviyesinde bir hatayı tetikleyecektir. Beş ve altı
        sekizlikli UTF-8 karakterler geçersiz yanıt olarak kabul edilir.
        PCRE 7.3 2007-08-28; evvelce bunlar geçerli UTF-8 karakterler olarak
        kabul ediliyordu.
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </blockquote>
  </para>
</article>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
